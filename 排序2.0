#include <iostream>
#include <stdlib.h>
#include <stack>
using namespace std;


void PrintArray(int array[], int size)
{
	for(int i=0; i<size; ++i)
	{
		cout<<array[i]<<" "; 
	}
	cout<<endl;
}

/*
void InsertSort(int array[], int size)
{
    for(int idx=1; idx<size; idx++)
    {
        int temp = array[idx];
        int end = idx-1;
        while(end>=0 && array[end] > temp)
        {
            array[end+1] = array[end];
            --end;
        }
        array[end+1] = temp;    

    }
}

void BinarySort(int array[], int size)
{

	for(int i=1; i<size; ++i)
	{
		int Left = 0;
		int Right = i-1;
		int temp = array[i];
		int end = i -1;
		int mid = 0;

		while(Left <= Right)
		{
			mid = Left + ((Right-Left)>>1);

			if(array[mid] > temp)
				Right = mid-1;
			else
				Left = mid+1;
		}

		for(int pos=end; pos>=Left; --pos)
		{
			array[pos+1] = array[pos];											
		}
		array[Left] = temp;
	}

}

void ShellSort(int array[], int size)
{
	int gap = size;
	while(gap > 1)
	{
		gap = gap/3	+ 1;
		for(int idx = gap; idx < size; ++idx)
		{
			int temp = array[idx];
			int end = idx - gap;
			while( end >= 0 && temp < array[end])
			{
				array[end+gap] = array[end];
				end -= gap;
			}
			array[end + gap] = temp;
		}
	}
}
*/
 /*
void HeapAdjust(int array[], int root, int size)
{
	int parent = root;
	int child = root*2 + 1;
	while(child < size)
	{	//还剩三个数据时：1（0）， 2（1）， 3（2）左右孩子需要调整，此时：child+1 == child
		if(child+1 <= size && array[child] < array[child + 1])
		{
			child += 1;
		}
	
		if(array[parent] < array[child])
		{
			std::swap(array[parent], array[child]);
			parent = child;
			child = child*2 + 1;
		}
		else
			break;
	}
									   
	
}

void HeapSort(int array[], int size)
{
	for(int idx = (size-2)/2; idx >= 0; --idx)
	{
		HeapAdjust(array, idx, size);
	}

	int index = size-1;
	while(index > 0)
	{
		std::swap(array[0], array[index]);
		index--;
		HeapAdjust(array, 0, index);
	}
}
*/

//int GetKeyIndex(int array[], int left, int right)
//{
//	int mid = left + ((right - left)>>1);
//	if(array[left] < array[right])
//	{
//		if(array[mid] < array[left])
//			return left;
//		if(array[mid] > array[right])
//			return right;
//		else
//			return mid;
//	}
//	else
//	{
//		if(array[mid] < array[right])
//			return right;
//		else if(array[mid] > array[left])
//			return left;
//		else
//			return mid;
//	}
//}
// 
//
/*
int partion(int array[], int left, int right)
{
	int begin = left;
	int end = right-1;
	////三个数取中间
	//int keyIndex = GetKeyIndex(array, left, right);
	//if(keyIndex != right)
	//{
	//	std::swap(array[keyIndex], right);
	//}
	int key = array[right];

	while( begin < end )
	{
		while( begin < end && array[begin] <= key)
			begin++;

		while( begin < end && array[end] > key)
			end--;

		if(begin < end)
		{
			swap(array[begin], array[end]);
			begin++;
			end--;
		}
	}
	if(begin != right && array[begin] > array [right])
	{
		swap(array[begin], array [right]);
		return begin;
	}
	return right;
}
 

void QuickSort(int array[], int left, int right)
{

	if(left < right)
	{
	   int div = partion(array, left, right);
	   QuickSort(array, left, div - 1);
	   QuickSort(array, div + 1, right);
	}
}
 */

 int partion(int array[], int left, int right)
{
	int begin = left;
	int end = right;
	////三个数取中间
	//int keyIndex = GetKeyIndex(array, left, right);
	//if(keyIndex != right)
	//{
	//	std::swap(array[keyIndex], right);
	//}
	int key = array[right];

	while( begin < end )
	{
		while( begin < end && array[begin] <= key)
			begin++;
		std::swap(array[begin], array[end]);

		while( begin < end && array[end] > key)
			end--;
		std::swap(array[begin], array[end]);
	}
	return begin;
}
 

void QuickSort(int array[], int left, int right)
{

	if(left < right)
	{
	   int div = partion(array, left, right);
	   QuickSort(array, left, div - 1);
	   QuickSort(array, div + 1, right);
	}
}
/*
int partion2(int array[], int left, int right)
{
	int begin = left;
	int end = right;
	
	int key = array[left];

	while( begin < end )
	{

		while( begin < end && array[end] >= key)
			end--;
		if(begin < end)
		{
			array[begin] = array[end];
			begin++;
		}

		while( begin < end && array[begin] <= key)
			begin++;
		if(begin < end)
		{
			array[end] = array[begin];
			end--;
		}
	}
	array[begin] = key;
	return begin;
}


void QuickSort(int array[], int left, int right)
{
	if(left < right)
	{
	   int div = partion2(array, left, right);
	   QuickSort(array, left, div - 1);
	   QuickSort(array, div + 1, right);
	}
}
*/
/*
int partion3(int array[], int left, int right)
{
	int Cur = left;
	int Prev = Cur - 1;
	
	int key = array[right];
	while(Cur <= right)
	{
		if(array[Cur] < key && ++Prev != Cur)
			std::swap(array[Prev], array[Cur]);
		 ++Cur;
	}
	std::swap(array[++Prev], array[right]);
	return Prev;
}
 */
/* 
void QuickSort(int array[], int left, int right)
{
	if(left < right)
	{
	   int div = partion3(array, left, right);
	   QuickSort(array, left, div - 1);
	   QuickSort(array, div + 1, right);
	}
}
 */
/*
void QuickSort_nor(int *array, int size)
{
	stack<int> s;
	s.push(size-1);
	s.push(0);
	while(!s.empty())
	{
		int left = s.top();
		s.pop();
		int right = s.top();
		s.pop();

		if(left < right)
		{
			int div = partion3(array, left, right);
			s.push(right);
			s.push(div +1);
			s.push(div -1);
			s.push(left);
		}

	}
}
  */

void CountSort(int *array, int size)
{
    int maxValue = array[0];
    int minValue = array[0];

    for(size_t idx = 0; idx < size; ++idx)
    {
        if(array[idx]>maxValue)
            maxValue = array[idx];
        if(array[idx] < minValue)
            minValue = array[idx];
    }
    int range = maxValue - minValue + 1;
    int *count = new int[range];
    memset(count, 0, range*sizeof(int));
    for(size_t idx = 0; idx<size; ++idx)
    {
        count[array[idx]-minValue]++;
    }

    size_t index = 0;
    for(int i=0; i<range; ++i)
    {
        for(int j=0; j<count; ++j)
        {
            array[index++] = minValue+i;            
        }        
    } 

    delete[] count;
} 
int main()
{
    int array[] = {2, 1, 6, 5, 8, 9, 3, 7, 4};
    int size = sizeof(array)/sizeof(array[0]);

	PrintArray(array, size);
	//InsertSort(array, size);
	//BinarySort(array, size);
	//ShellSort(array, size);
	//HeapSort(array, size);
	//QuickSort(array, 0, 8);
	//QuickSort_nor(array, size);
	CountSort(array, size);
	PrintArray(array, size);

	system("pause");
	return 0;
}
