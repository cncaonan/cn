#include <string>

void Merge(int *array, int *temp, int left, int mid, int right)
{
	int begin1 = left;
	int end1 = mid;
	int begin2 = mid + 1;
	int end2 = right;

	int index = left;

	while(begin1 <= end1 && begin2 <= end2)
	{
		if(array[begin1] <= array[begin2])
			temp[index++] = array[begin1++];
		else
			temp[index++] = array[begin2++];
	}
	while(begin1 <= end1)
		temp[index++] = array[begin1++];
	while(begin2 <= end2)
		temp[index++] = array[begin2++];
	
}
void _MergeSort(int *array, int *temp, int left, int right)
{
	if(left < right)
	{
		int mid = left + ((right - left)>>1);
		_MergeSort(array, temp, left, mid);
		_MergeSort(array, temp, mid+1, right);

		Merge(array, temp, left, mid, right);
		//避免重复拷贝
		memcpy(array + left, temp + left, (right - left + 1)*sizeof(array[0]));
	}
}
void MergeSort(int *array, int size)
{
	int *temp = new int[size];
	_MergeSort(array, temp, 0, size-1);
	delete[] temp;
}

void MergeSort_Nor(int *array, int size)
{
	int *temp = new int[size];
	int left = 0;
	int right = size - 1;
	int gap = 1;
	while(gap < size)
	{
		for(int idx = 0; idx < size; idx += 2*gap)
		{
			left = idx;
			int mid = left + gap - 1;
			int right = mid + gap;

			if(mid >= size)
				mid = size - 1;
			if(right >= size)
				right = size - 1;
			Merge(array, temp, left, mid, right);
		}					 
		memcpy(array, temp, sizeof(int)*size);
		gap <<= 1;
	}
	delete[] temp;
}
